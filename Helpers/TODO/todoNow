* JS Charting
** Log errors

* Log
** Localization resources
** Find TODOs
** DevMode: Log everything to UI as well, independently from the concrete log calls
*** So eg Log.Warn(...Logtarget.Log...) should also be logged to UI as well, if this DevMode flag is set
*** Or, maybe this should also hold a LogLevel
** LocalizedKeys
** MessagePresenter

* Copy
** Do not copy if there is no selection
*** Command based MenuItem handlers
** Csv
** Ctrl+C is tricky. One has to press the buttons hard to achieve a Ctrl+C event

* Markers
* Xaml extract

Implement MainSettings.xml and RepoSettings.xml things
* CopyFormat
* Currency
* LastInitVersion
* Starting problem with MainSettings.xml: If a new, virgin app starts, it will crash on the RepoRoot validation
** Started to fix this, but still need testing

* localization to config error messages (because they would appear on ui)
* TransportData: How should it work in the new system?
** Currently can't work from VS in Release mode (but that's not a problem)
** TransportData: Currently does not run from VS, only from WPF/bin/.. (because of the MainSettings.xml location)
*** Maybe we only should copy that file on build, like by the WPF project
* TransportData in the new MsSql/SQLite repo system should check the CLI args, and compare them to the RepoSettings.xml. At least alert the user that eg if the RepoSettings has a configuration of DbType.SQLite, than don't want to import data from MsSql, because probably that db won't exists - in better case; but the xml has a default value for the database name as "ExinDeveloper"; so it could be that another repo's data will be transported, and the current's overriden with it

* DatePaths -> ctor arg: Repo

---
TEST TransportData when the args From and To are both DB types

* ExinConnString: Next level of configurability: Managers should have 1 instance, which they could take also in ctor
** RepoPaths: no more static
* InitAllStatic
* Currency
* SQLiteSpecific.cs uses Config.Repo. Is it ok so?